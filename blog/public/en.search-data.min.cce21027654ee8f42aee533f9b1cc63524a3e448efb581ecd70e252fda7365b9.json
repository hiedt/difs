[{"id":0,"href":"/about_me/","title":"About Me","section":"","content":"\rAbout Me\r#\rNothing special\r#\rI am just a broke DIY (do-it-yourself) enthusiast.\nAfter receiving my Mechatronic Engineering degrees: BEng from VNU-HCM (Vietnam) and MSc from SDU (Denmark), I became a software developer for the wind energy sector. Regardless of straight-A grades and a \u0026ldquo;cum laude\u0026rdquo; status, I still suck! For real, I graduated without knowing how to wire a stepper motor. This was because high-quality textbooks were too expensive, experimental equipment was limited, zero connections with the local industry, bad teachers, and lazy self. Sounds familiar? I know you, brothers. We all once were students.\nNow that I have free time, instead for regrets, I write.\nHow I created this blog\r#\rAs you may have guessed, this blog is fully static. But, with the existence of various static-site generators (Hugo, Jekyll, Gasby), markup languages (Markdown, AsciiDoc, reStructuredText), hosting services (Netlify, AWS Amplify, Vercel), choosing one technology stack is not easy. To avoid the analysis-paralysis trap, let us walk through some important checkpoints:\nTarget audiences: future me, other STEM students \u0026amp; industrial practitioners. Topics: control theory, dynamical systems, signal processing, machine learning, and implementing them. Orientation: Wiki-like knowledge base using Zettelkasten method, neither numbered chapters nor tutorial hell. Format: tech blog with code in MATLAB/Simulink/Python and LaTeX-supported notes. Desired features: immersive reader, directed graph, fuzzy \u0026amp; full-text search, interactive plots. Scalability: might later become a book (\u0026gt; 1Gb), easy to migrate to another tech stack or web host. Free as in \u0026ldquo;free beer\u0026rdquo; This list makes our concern clear enough for Google Gemini to come up with a very nice option: convert Jupyter Notebooks to HTML using Voila. Cool. But, Markdown sucks at LaTeX while Voila only offers some ancient themes. Then, until someone does a better job, I will create my own graphic and an AsciiDoc renderer for Jupyter.\n"},{"id":1,"href":"/statistical-signal-processing/linear_regression/","title":"Linear Regression","section":"Statistical Signal Processings","content":"\rLinear Regression\r#\rIntroduction\r#\rLinear regression is a statistical method used to model the relationship between a dependent variable and one or more independent variables. It is widely used for predictive analysis and understanding the strength of relationships between variables.\nSimple Linear Regression\r#\rSimple linear regression involves a single independent variable. The relationship between the dependent variable (Y) and the independent variable (X) is modeled by a linear equation:\n$$ Y = \\beta_0 + \\beta_1X + \\epsilon $$\nWhere:\nY is the dependent variable. X is the independent variable. \\beta_0 is the y-intercept. \\beta_1 is the slope of the line. \\epsilon is the error term. Multiple Linear Regression\r#\rMultiple linear regression involves two or more independent variables. The relationship is modeled by the following equation:\n$$ Y = \\beta_0 + \\beta_1X_1 + \\beta_2X_2 + \\ldots + \\beta_nX_n + \\epsilon $$\nWhere:\nY is the dependent variable. X_1, X_2, \\ldots, X_n are the independent variables. \\beta_0 is the y-intercept. \\beta_1, \\beta_2, \\ldots, \\beta_n are the coefficients of the independent variables. \\epsilon is the error term. Assumptions of Linear Regression\r#\rLinear regression relies on several key assumptions:\nLinearity: The relationship between the dependent and independent variables is linear. Independence: Observations are independent of each other. Homoscedasticity: The residuals (errors) have constant variance. Normality: The residuals are normally distributed. Applications\r#\rLinear regression is used in various fields, including:\nEconomics: To predict consumer spending based on income. Medicine: To model the relationship between dosage and response. Engineering: To estimate the impact of temperature on material strength. Example Python Code Using scikit-learn\r#\rHere\u0026rsquo;s an example of how to perform linear regression using scikit-learn in Python:\nimport numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score # Generate some example data np.random.seed(0) X = 2 * np.random.rand(100, 1) y = 4 + 3 * X + np.random.randn(100, 1) # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create a linear regression model model = LinearRegression() # Train the model model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate the model mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) print(f\u0026#34;Mean Squared Error: {mse}\u0026#34;) print(f\u0026#34;R^2 Score: {r2}\u0026#34;) # Plot the results plt.scatter(X_test, y_test, color=\u0026#39;black\u0026#39;, label=\u0026#39;Actual data\u0026#39;) plt.plot(X_test, y_pred, color=\u0026#39;blue\u0026#39;, linewidth=3, label=\u0026#39;Predicted line\u0026#39;) plt.xlabel(\u0026#39;X\u0026#39;) plt.ylabel(\u0026#39;y\u0026#39;) plt.title(\u0026#39;Linear Regression Example\u0026#39;) plt.legend() plt.show() "}]